diff --git a/server/migrations/002_create_rooms_table/up.sql b/server/migrations/002_create_rooms_table/up.sql
index e15928f..ea6f392 100644
--- a/server/migrations/002_create_rooms_table/up.sql
+++ b/server/migrations/002_create_rooms_table/up.sql
@@ -4,4 +4,3 @@ create table rooms (
   name text not null unique,
   created_at timestamp with time zone default now()
 );
-
diff --git a/server/src/index.ts b/server/src/index.ts
index fbc5f80..67a69b9 100644
--- a/server/src/index.ts
+++ b/server/src/index.ts
@@ -57,18 +57,29 @@ app.get('/users', async (req: Request, res: Response) => {
 });
 
 app.post('/users', async (req: Request, res: Response) => {
-    const { username, email, password_hash } = req.body;
-    if (!username || !email || !password_hash) {
+    const { username, email, password } = req.body;
+    console.log("Datos recibidos:", req.body);
+    if (!username || !email || !password) {
         res.status(400).json({ error: 'Invalid data' });
         return;
     }
 
-    const hashedPassword = await bcrypt.hash(password_hash, 10)
+    const password_hash = await bcrypt.hash(password, 10)
 
     let query = 'INSERT INTO users (username, email, password_hash) VALUES ($1, $2, $3) RETURNING *';
-    const { rows } = await db.query(query, [username, email, hashedPassword]);
+    const { rows } = await db.query(query, [username, email, password_hash]);
     io.emit('new-usr', rows[0]);
-    res.json(rows[0]);
+
+    return res.json(rows[0]);
+});
+
+app.get('/message/:room_id', async (req: Request, res: Response) => {
+    const { room_id } = req.params;
+    const { rows } = await db.query('SELECT * FROM messages WHERE room_id = $1', [room_id]);
+    if (rows.length === 0) {
+        return res.status(404).json({ error: 'No messages found' });
+    }
+    return res.json(rows);
 });
 
 app.post('/message', async (req: Request, res: Response) => {
@@ -91,7 +102,56 @@ app.post('/message', async (req: Request, res: Response) => {
         console.error(error);
     }
 
-    res.json(newMessage);
+    return res.json(newMessage);
+});
+
+app.post('/room', async (req: Request, res: Response) => {
+    const { name, user_id } = req.body;
+    console.log(req.body)
+    if (!name || !user_id) {
+        res.status(400).json({ error: 'Invalid data' });
+        return;
+    }
+
+    let room_query = 'INSERT INTO rooms (name) VALUES ($1) RETURNING *';
+    const { rows: roomRows } = await db.query(room_query, [name]);
+
+
+    if (roomRows.length == 0) return res.status(500).json({ error: 'Room creation failed' });
+
+    const newRoom = roomRows[0];
+
+    // insert the creator of the room on room_members
+    const member_query = 'INSERT INTO room_members (room_id, user_id) VALUES ($1, $2)';
+    await db.query(member_query, [newRoom.id, user_id]);
+
+    try {
+        io.emit('new-room', newRoom);
+    } catch (error) {
+        console.error(error);
+    }
+
+    return res.json(newRoom);
+});
+
+app.get('/rooms/:user_id', async (req: Request, res: Response) => {
+    const { user_id } = req.params;
+
+    try {
+        // join between rooms and room_members
+        const query = `
+            SELECT r.*
+            FROM rooms r
+            JOIN room_members rm ON r.id = rm.room_id
+            WHERE rm.user_id = $1
+        `;
+
+        const { rows } = await db.query(query, [user_id]);
+        return res.json(rows)
+    } catch (error) {
+        console.error("Error al obtener las salas:", error);
+        return res.status(500).json({ error: "Internal Server Error" });
+    }
 });
 
 server.listen(3000, () => {
